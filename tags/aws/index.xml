<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>aws on Sami Jaktholm</title>
    <link>/tags/aws/</link>
    <description>Recent content in aws on Sami Jaktholm</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;span&gt;Powered by &lt;a href=&#34;https://gohugo.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hugo&lt;/a&gt; and &lt;a href=&#34;https://github.com/panr/hugo-theme-hello-friend&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hello Friend&lt;/a&gt; theme&lt;/a&gt;&lt;/span&gt;</copyright>
    <lastBuildDate>Sun, 24 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/aws/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Debugging Application Load Balancer TLS Negotiation Errors with Amazon VPC Traffic Mirroring</title>
      <link>/posts/alb-vpc-traffic-mirroring/</link>
      <pubDate>Sun, 24 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/alb-vpc-traffic-mirroring/</guid>
      <description>I recently came across an Application Load Balancer (ALB) that had started to report an increasing number of Client TLS Negotiation Errors.
If you have ever tried to determine the cause of these errors, you might know the ALB does not provide any detail on why these errors occur. Failed connection attempts are not even logged into the ALB Access Logs. The ALB just reports each failed connection by incrementing the ClientTLSNegotiationErrorCount metric in CloudWatch.</description>
    </item>
    
    <item>
      <title>aws-dynamodb-copy</title>
      <link>/projects/aws-dynamodb-copy/</link>
      <pubDate>Fri, 31 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/projects/aws-dynamodb-copy/</guid>
      <description>aws-dynamodb-copy is a simple script that allows you to copy the contents of a DynamoDB table into another table on the same AWS region.
The script doesn&amp;rsquo;t provide any fancy features. It scans the source table using a parallel scan and writes the items to the target tables in batches. The rate at which items are copied can be tuned to suit the capacity allocated to the target and source tables.</description>
    </item>
    
    <item>
      <title>aws-s3-basic-auth</title>
      <link>/projects/aws-s3-basic-auth/</link>
      <pubDate>Sun, 12 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/projects/aws-s3-basic-auth/</guid>
      <description>The aws-s3-basic-auth project contains a setup for protecting access to S3 bucket with HTTP Basic Authentication.
The setup creates a CloudFront distribution for serving files from the target bucket. A custom Lambda@Edge function is used to authenticate all requests made to the CloudFront distribution. CloudFront authenticates itself to S3 using a custom Origin Access Identity which prevents direct access to the contents of S3.
The entire setup can be deployed through CloudFormation to protect access to any existing S3 bucket.</description>
    </item>
    
    <item>
      <title>aws-account-infra</title>
      <link>/projects/aws-account-infra/</link>
      <pubDate>Sun, 10 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/projects/aws-account-infra/</guid>
      <description>This projects contains an opinionated set of CloudFormation templates for an AWS infrastructure setup that contains the following components:
 CloudTrail audit log saved to Amazon S3 for long-term storage. IAM roles, policies, groups and users with MFA required for all access to AWS resources. KMS key for encrypting sensitive data. VPC with route tables that provide varying level of access to / from the public internet.  View in Github </description>
    </item>
    
    <item>
      <title>aws-kms-crypt</title>
      <link>/projects/aws-kms-crypt/</link>
      <pubDate>Sun, 10 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/projects/aws-kms-crypt/</guid>
      <description>aws-kms-crypt is a cross-language utility for managing application secrets within AWS using the KMS service. The key features of this tool are:
Features  Interoperable - Interoperable implementations for Bash, NodeJS, Python and Rust. Secure - AES encryption with KMS generated data keys. Simple - Simple API for encrypting and decrypting sensitive data in all supported languages.  Installation  Node.js module in NPM: https://www.npmjs.com/package/aws-kms-crypt Python package in PyPi: https://pypi.python.org/pypi/aws-kms-crypt Shell script in Github: https://github.</description>
    </item>
    
    <item>
      <title>cfn-execute-change-set</title>
      <link>/projects/cfn-execute-changeset/</link>
      <pubDate>Sun, 10 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/projects/cfn-execute-changeset/</guid>
      <description>cfn-execute-change-set is a command line utility for reviewing and executing AWS CloudFormation change sets. The tool parses the output of AWS CLI create-change-set command, prints out a summary of changes and executes the change set if so instructed.
This utility requires Node.js and can be installed with npm:
npm install -g cfn-execute-change-set Links  Package in NPM: https://www.npmjs.com/package/cfn-execute-change-set  View in Github </description>
    </item>
    
    <item>
      <title>cfn-monitor</title>
      <link>/projects/cfn-monitor/</link>
      <pubDate>Sun, 10 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/projects/cfn-monitor/</guid>
      <description>cfn-monitor is a command line utility for monitoring the progress of CloudFormation stack operations. The tool parses the output of the AWS CLI create-stack and update-stack commands, listens for the stack events of the affected stacks and prints them out to the terminal as they occur.
This utility requires Node.js and can be installed with npm:
npm install -g cfn-monitor Links  Package in NPM: https://www.npmjs.com/package/cfn-monitor  View in Github </description>
    </item>
    
  </channel>
</rss>